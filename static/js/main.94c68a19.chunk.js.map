{"version":3,"sources":["reducers/counter.js","reducers/files.js","reducers/index.js","actions/counter.js","actions/files.js","store.js","components/File/index.js","selectors/files.js","containers/FileList/index.js","containers/Progress/index.js","containers/App/App.js","serviceWorker.js","index.js","components/File/logo.svg","components/File/redux.svg"],"names":["initialState","value","type","list","rootReducer","combineReducers","counter","state","arguments","length","undefined","Object","objectSpread","files","action","fileType","toConsumableArray","concat","file","configureStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","File","isReact","this","props","react_default","a","createElement","className","__source","fileName","_jsxFileName","lineNumber","__self","src","react","alt","redux","Component","getFilteredFiles","createSelector","console","log","filter","id","FileList","fileComponents","map","components_File","key","name","FileList_jsxFileName","connect","Progress","percent","Progress_jsxFileName","progress","showInfo","strokeLinecap","App","startCounterInterval","timer","setInterval","_this","increment","clearInterval","setTimeout","reset","index","addFile","_this2","App_jsxFileName","onClick","changeType","containers_FileList","containers_Progress","Boolean","location","hostname","match","ReactDOM","render","es","store","src_jsxFileName","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.94c68a19.chunk.js","sourcesContent":["import { INCREMENT, RESET } from \"../actions/counter\"\n\nconst initialState = {\n  value: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, value: ++state.value }\n    case RESET:\n      return { ...state, value: 0 }\n    default:\n      return state\n  }\n}\n","import { ADD_FILE, CHANGE_TYPE } from \"../actions/files\"\n\nconst initialState = {\n  type: \"react\",\n  list: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_TYPE:\n      return { ...state, type: action.fileType }\n    case ADD_FILE:\n      return { ...state, list: [...state.list, action.file] }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from \"redux\"\nimport counter from \"./counter\"\nimport files from \"./files\"\n\nconst rootReducer = combineReducers({\n  counter,\n  files\n})\n\nexport default rootReducer\n","export const INCREMENT = \"INCREMENT\"\nexport const RESET = \"RESET\"\n\nexport const increment = () => ({\n  type: INCREMENT\n})\n\nexport const reset = () => ({\n  type: RESET\n})\n","export const ADD_FILE = \"ADD_FILE\"\nexport const CHANGE_TYPE = \"CHANGE_TYPE\"\n\nexport const addFile = file => ({\n  type: ADD_FILE,\n  file\n})\n\nexport const changeType = fileType => ({\n  type: CHANGE_TYPE,\n  fileType\n})\n","import { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst configureStore = () => {\n    const store = createStore(rootReducer, {}, window.__REDUX_DEVTOOLS_EXTENSION__())\n\n    return store\n  }\n\n  export default configureStore()\n","import React, { Component } from \"react\"\nimport \"./File.css\"\nimport react from \"./logo.svg\"\nimport redux from \"./redux.svg\"\n\nlet counter = 0\n\nclass File extends Component {\n  render() {\n    const isReact = this.props.type === \"react\"\n    return (\n      <div className=\"file\">\n        <span>{this.props.fileName}</span>\n        {isReact && <img src={react} className=\"file-logo\" alt=\"logo\" />}\n        {!isReact && <img src={redux} className=\"file-logo\" alt=\"logo\" />}\n        <span>Render called: {counter++}</span>\n      </div>\n    )\n  }\n}\n\nexport default File\n","import { createSelector } from \"reselect\"\n\nconst getFiles = state => state.files\n\nexport const getFilteredFiles = createSelector([getFiles], files => {\n  console.log(\"SELECTOR CALLED\")\n  return files.list.filter(file => file.type === files.type)\n})\n\nexport const getEvenFiles = createSelector([getFilteredFiles], files => {\n  return files.list.filter(file => file.id % 2 === 0)\n})\n\nexport const getOddFiles = createSelector([getFilteredFiles], files => {\n  return files.list.filter(file => file.id % 2 === 1)\n})\n","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport File from \"../../components/File\"\nimport { getFilteredFiles } from \"../../selectors/files\"\nimport \"./FileList.css\"\n\nclass FileList extends Component {\n  render() {\n    const fileComponents = this.props.files.map(file => (\n      <File key={file.id} type={file.type} fileName={file.name} />\n    ))\n    return <div className=\"file-list\">{fileComponents}</div>\n  }\n}\n\nconst mapStateToProps = state => ({\n  files: state.files.list.filter(file => file.type === state.files.type) // filter returns a new array so this causes the File component to re-render EVERY time the state changes\n  // files: getFilteredFiles(state),                                     // Using a memoized selector will ensure that the same reference is always returned unless something *actually* changes.\n  // stuff: {}                                                           // Just returning a new object from mapStateToProps will cause File component to re-render EVERY time the state changes\n})\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(FileList)\n","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Progress as AntProgress } from \"antd\"\nimport \"./Progress.css\"\nimport \"antd/dist/antd.css\"\n\nclass Progress extends Component {\n  render() {\n    const percent = this.props.counter\n    return (\n      <div className=\"upload-progress\">\n        <div className=\"upload-progress__content\">\n          <div className=\"upload-progress__content__message\">\n            Uploading... ({percent}\n            %)\n          </div>\n        </div>\n        <AntProgress\n          className=\"upload-progress__bar\"\n          percent={percent}\n          showInfo={false}\n          strokeLinecap=\"square\"\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter.value\n})\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(Progress)\n","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { increment, reset } from \"../../actions/counter\"\nimport { addFile, changeType } from \"../../actions/files\"\nimport FileList from \"../FileList\"\nimport Progress from \"../Progress\"\nimport \"./App.css\"\n\nclass App extends Component {\n  startCounterInterval = () => {\n    const timer = setInterval(() => {\n      this.props.increment()\n      if (this.props.counter === 100) {\n        clearInterval(timer)\n        setTimeout(() => {\n          this.props.reset()\n          setTimeout(() => {\n            this.startCounterInterval()\n          }, 100)\n        }, 500)\n      }\n    }, 50)\n  }\n\n  componentDidMount() {\n    for (let index = 0; index < 2000; index++) {\n      const file = {\n        id: index,\n        name: `Janky-${index}`,\n        type: index <= 1000 ? \"react\" : \"redux\"\n      }\n      this.props.addFile(file)\n    }\n    this.startCounterInterval()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={() => this.props.changeType(\"react\")}>React</button>\n        <button onClick={() => this.props.changeType(\"redux\")}>Redux</button>\n        <FileList />\n        <Progress />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter.value,\n  files: state.files\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    increment,\n    reset,\n    addFile,\n    changeType\n  }\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\n\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\n\nimport App from \"./containers/App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/redux.5ae1af16.svg\";"],"sourceRoot":""}